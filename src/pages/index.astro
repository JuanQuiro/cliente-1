---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import MainLayout from '../layouts/MainLayout.astro';
import { Image, getImage } from 'astro:assets';
import heroUno from '../assets/image-hero-index/hero-uno.jpg';
import heroDos from '../assets/image-hero-index/hero-dos.jpg';
import heroTres from '../assets/image-hero-index/hero-tres.jpg';

// Generar imágenes optimizadas para el slider con máxima calidad
const heroImageOptimized1 = await getImage({src: heroUno, format: 'webp', quality: 90, width: 1920, height: 1080});
const heroImageOptimized2 = await getImage({src: heroDos, format: 'webp', quality: 90, width: 1920, height: 1080});
const heroImageOptimized3 = await getImage({src: heroTres, format: 'webp', quality: 90, width: 1920, height: 1080});

const heroImages = [heroImageOptimized1.src, heroImageOptimized2.src, heroImageOptimized3.src];
const firstHero = heroImages[0];

const pageTitle = 'Inicio';
const pageDescription = 'Servicios profesionales de mantenimiento para tu hogar o negocio.';
---

<!-- Critical: Immediate hero display script -->
<script is:inline define:vars={{heroImages}}>
// This script runs IMMEDIATELY to prevent any blank hero screen
window.heroImages = heroImages;
(function() {
  // Set hero background immediately when DOM is ready
  function ensureHeroDisplay() {
    const hero = document.querySelector('.hero');
    if (hero) {
      // Ensure the hero has immediate visual content
      hero.style.backgroundImage = "url('" + heroImages[0] + "')";
      hero.style.backgroundSize = 'cover';
      hero.style.backgroundPosition = 'center';
      hero.style.backgroundRepeat = 'no-repeat';
      console.log('⚡ Hero background set immediately');
    }
  }
  
  // Execute immediately if DOM is ready, otherwise wait for it
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', ensureHeroDisplay);
  } else {
    ensureHeroDisplay();
  }
})();
</script>

<MainLayout title={pageTitle} description={pageDescription}>
  <!-- Critical Performance Optimizations -->
  <link rel="preload" as="image" href={firstHero} slot="head" fetchpriority="high" />
  <link rel="prefetch" as="image" href={heroImages[1]} slot="head" />
  <link rel="prefetch" as="image" href={heroImages[2]} slot="head" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" slot="head" />
  
  <!-- Optimized CSS for instant hero display -->
  <style slot="head">
    /* Immediate hero background - shows instantly */
    .hero {
      min-height: 100vh;
      position: relative;
      /* Fallback gradient background for instant display */
      background: linear-gradient(135deg, rgba(26, 77, 58, 0) 0%, rgba(45, 90, 61, 0) 50%, rgba(26, 77, 58, 0) 100%);
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-attachment: fixed;
    }
    
    /* Ensure content is always visible above background */
    .hero-content {
      position: relative;
      z-index: 10;
    }
    
    /* Ensure slider controls are always clickable and visible */
    .slider-nav {
      position: absolute !important;
      top: 50% !important;
      left: 0 !important;
      right: 0 !important;
      transform: translateY(-50%) !important;
      display: flex !important;
      justify-content: space-between !important;
      padding: 0 2rem !important;
      z-index: 20 !important;
      pointer-events: none !important;
    }
    
    .slider-dots {
      position: absolute !important;
      bottom: 30px !important;
      left: 50% !important;
      transform: translateX(-50%) !important;
      display: flex !important;
      gap: 15px !important;
      padding: 15px 25px !important;
      background: rgba(0, 0, 0, 0.3) !important;
      backdrop-filter: blur(10px) !important;
      border: 1px solid rgba(255, 255, 255, 0.2) !important;
      border-radius: 50px !important;
      z-index: 20 !important;
    }
    
    .slider-progress {
      position: absolute !important;
      bottom: 0 !important;
      left: 0 !important;
      right: 0 !important;
      height: 6px !important;
      background: rgba(0, 0, 0, 0.3) !important;
      z-index: 9999 !important;
      pointer-events: none !important;
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
      border-top: 1px solid rgba(255, 255, 255, 0.1) !important;
      overflow: hidden !important;
    }
    
    .slider-progress-bar {
      height: 100% !important;
      background: linear-gradient(90deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 1) 100%) !important;
      width: 0%;
      box-shadow: 0 0 15px rgba(26, 77, 58, 0.8), 0 0 30px rgba(26, 77, 58, 0.4) !important;
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
      border-radius: 0 !important;
      animation: progressCycle 18s infinite linear !important;
    }
    
    @keyframes progressCycle {
      0% { width: 0%; }
      16.66% { width: 33.33%; }
      33.33% { width: 33.33%; }
      50% { width: 66.66%; }
      66.66% { width: 66.66%; }
      83.33% { width: 100%; }
      100% { width: 0%; }
    }
    
    .slider-arrow {
      width: 60px !important;
      height: 60px !important;
      border-radius: 50% !important;
      border: 2px solid rgba(255, 255, 255, 0.3) !important;
      background: rgba(0, 0, 0, 0.2) !important;
      backdrop-filter: blur(15px) !important;
      color: white !important;
      font-size: 18px !important;
      cursor: pointer !important;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      outline: none !important;
      pointer-events: all !important;
      position: relative !important;
      overflow: hidden !important;
    }
  </style>
  <!-- Hero Section -->
  <section class="hero" style={`background-image: url('${firstHero}')`}>
    <div class="container">
      <div class="hero-content">
        <h1 class="!text-black"><span class="highlight !text-black">Servicios</span> de Mantenimiento Residencial y Comercial</h1>
        <p class="tagline !text-black !font-semibold">Instaladores expertos en techado y paisajismo a su servicio. Obtenga más información sobre nuestros servicios y comience hoy mismo.</p>
        
        <div class="hero-buttons">
          <a href="/servicios" class="btn btn-primary hover:text-black">Nuestros Servicios</a>
          <a href="/contacto" class="btn btn-outline">Solicitar Cotización</a>
        </div>
      </div>
      
    </div>
    <!-- Slider Navigation -->
    <div class="slider-nav">
      <button class="slider-arrow slider-arrow-prev" aria-label="Previous slide">
        <i class="fas fa-chevron-left"></i>
      </button>
      <button class="slider-arrow slider-arrow-next" aria-label="Next slide">
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
    <div class="slider-dots"></div>
    <!-- Slider Progress Bar -->
    <div class="slider-progress">
      <div class="slider-progress-bar"></div>
    </div>
  </section>

  <!-- About Section -->
  <section class="about-section">
    <div class="container about-grid">
      <!-- Card Sobre Nosotros -->
      <div class="about-card">
        <h3><span class="highlight">SOBRE NOSOTROS</span></h3>
        <p>En <strong>Jonathan Roofing and Landscaping</strong>, nos especializamos en transformar y mantener espacios exteriores con soluciones integrales para hogares y negocios en Puerto Rico.</p>
        <p>Nuestro enfoque combina calidad, experiencia local y atención personalizada.</p>
        <ul class="about-list">
          <li>Servicios completos desde el diseño hasta el mantenimiento continuo</li>
          <li>Técnicas probadas con herramientas profesionales (STIHL, ILLEGNO, OBERNARD)</li>
          <li>Compromiso con Puerto Rico, mejorando entornos residenciales y comerciales</li>
        </ul>
      </div>

      <!-- Beneficios directos -->
      <div class="benefit-card">
          <i class="fas fa-map-marker-alt icon"></i>
          <h4>Experiencia Local</h4>
          <p>Años sirviendo a comunidades puertorriqueñas y conocimiento profundo de sus necesidades climáticas y estructurales.</p>
        </div>
        <div class="benefit-card">
          <i class="fas fa-check-circle icon"></i>
          <h4>Calidad Garantizada</h4>
          <p>Equipos industriales y materiales premium; sellado de techos con garantía incluida.</p>
        </div>
        <div class="benefit-card">
          <i class="fas fa-tools icon"></i>
          <h4>Soluciones Prácticas</h4>
          <p>Resolución eficiente de problemas (empozamientos, grietas, jardines descuidados) y mantenimiento preventivo para ahorrar costos.</p>
        </div>
        <div class="benefit-card">
          <i class="fas fa-headset icon"></i>
          <h4>Atención al Cliente</h4>
          <p>Servicio cercano y dedicado, adaptado a las necesidades de cada proyecto.</p>
        </div>
      </div>
    </div>
  </section>

  

  <!-- Featured Services -->
  <section class="featured-services">
    <div class="container ">
      <div class="section-header ">
        <h2>Nuestros Servicios</h2>
        <p>Ofrecemos una amplia gama de servicios profesionales para satisfacer todas tus necesidades de mantenimiento.</p>
      </div>
      
      <div class="services-grid ">
        <div class="service-card">
          <div class="mx-auto service-icon">
            <i class="fas fa-leaf"></i>
          </div>
          <div class="service-content">
            <h3>Corte de Grama</h3>
            <p>Mantenimiento profesional de jardines y áreas verdes para mantener tu espacio exterior impecable.</p>
          </div>
        </div>
        
        <div class="service-card">
          <div class="mx-auto service-icon">
            <i class="fas fa-home"></i>
          </div>
          <div class="service-content">
            <h3>Limpieza de Techos</h3>
            <p>Eliminación de musgo, hojas y suciedad para prolongar la vida útil de tu techo.</p>
          </div>
        </div>
        
        <div class="service-card">
          <div class="mx-auto service-icon">
            <i class="fas fa-paint-roller"></i>
          </div>
          <div class="service-content">
            <h3>Pintura Profesional</h3>
            <p>Transforma tus espacios con nuestro servicio de pintura de la más alta calidad.</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- CTA Banner -->
  <section class="cta-banner"><div class="container">
    <h2 class="text-white mr-6">¿Listo para transformar tu espacio?</h2>
    <a href="/contacto" class="btn btn-primary">Solicita tu Cotización Gratis</a>
  </div>
  </section>

  <!-- Contact Section -->
  <section class="contact-section">
    <div class="container">
      <div class="contact-grid">
        <div class="contact-info">
          <h2>Contáctanos</h2>
          <p>¿Tienes alguna pregunta o necesitas más información? Estamos aquí para ayudarte.</p>
          
          <div class="info-item">
            <div class="info-icon">
              <i class="fas fa-phone"></i>
            </div>
            <div class="info-content">
              <h4>Teléfono</h4>
              <a href="tel:+19392634528">+1 (939) 263-4528</a>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-icon">
              <i class="fas fa-envelope"></i>
            </div>
            <div class="info-content">
              <h4>Correo electrónico</h4>
              <a href="mailto:jonathanroofingandlandscaping@gmail.com">jonathanroofingandlandscaping@gmail.com</a>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-icon">
              <i class="fas fa-map-marker-alt"></i>
            </div>
            <div class="info-content">
              <h4>Dirección</h4>
              <p>Barranquitas, Puerto Rico</p>
            </div>
          </div>
          
          <div class="social-links">
            <a href="https://www.facebook.com/share/v/1CGUbDV77U/?mibextid=wwXIfr" class="social-link" aria-label="Facebook">
              <i class="fab fa-facebook-f"></i>
            </a>
            <a class="hidden" href="#" class="social-link" aria-label="Instagram">
              <i class="fab fa-instagram"></i>
            </a>
            <a href="http://wa.link/tx3x9f" class="social-link" aria-label="WhatsApp">
              <i class="fab fa-whatsapp"></i>
            </a>
          </div>
        </div>
        
        <div class="map-container">
          <div id="map"></div>
          <div class="map-overlay">
            <i class="fas fa-map-marker-alt"></i>
            <span>Nuestra ubicación</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  
  
  <style>
    .hero .container { flex-direction: column; align-items: center; text-align: center; }
    .hero-image { display: none; }
    .newsletter-section { padding: 4rem 0; text-align: center; }
    .newsletter-form { display: flex; gap: 1rem; justify-content: center; max-width: 500px; margin: 2rem auto 0; }
    .newsletter-form input { flex: 1; padding: 0.75rem 1rem; border: 1px solid var(--gray); border-radius: var(--radius); font-size: 1rem; }
    .newsletter-form button { padding: 0.75rem 1.5rem; }
    /* Override primary button color to green */
    .btn-primary { background-color: #28a745; border-color: #28a745; }
    .btn-primary:hover { background-color: #218838; border-color: #1e7e34; }
    /* Mostrar secciones anteriormente ocultas y estilos modernizados */
    .featured-services, .contact-section { display: block; }

    /* Hero */
    .hero .btn-primary { background:var(--accent); border-color:var(--accent); }
    .hero .btn-primary:hover { background:#c77705; }
    .hero .btn-outline { border-color:#fff; color:#fff; }
    .hero .btn-outline:hover { background:rgba(255,255,255,0.15); }
    .hero {
      min-height: 100vh;
      position: relative;
      display: flex;
      align-items: center;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      overflow: hidden;
      will-change: background-image;
      backface-visibility: hidden;
      transform: translateZ(0);
    }
    
    .hero .container {
      position: relative;
      z-index: 2;
    }
    
    /* Premium Navigation Dots - Ultra Smooth */
    .slider-dots {
      position: absolute;
      bottom: 30px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 15px;
      padding: 15px 25px;
      background: rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 50px;
      z-index: 10;
    }
    
    .slider-dots button {
      width: 14px;
      height: 14px;
      border-radius: 50%;
      border: 2px solid rgba(255, 255, 255, 0.7);
      background: rgba(255, 255, 255, 0.3);
      cursor: pointer;
      transition: all 0.3s ease;
      outline: none;
      padding: 0;
      margin: 0;
    }
    
    .slider-dots button:hover {
      transform: scale(1.2);
      border-color: rgba(255, 255, 255, 0.9);
      background: rgba(255, 255, 255, 0.5);
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }
    
    .slider-dots button.active {
      transform: scale(1.4);
      border-color: rgba(255, 255, 255, 1);
      background: rgba(255, 255, 255, 0.8);
      box-shadow: 
        0 0 15px rgba(255, 255, 255, 0.5),
        0 0 30px rgba(255, 255, 255, 0.3);
    }
    
    /* Responsive dots */
    @media (max-width: 768px) {
      .slider-dots {
        bottom: 20px;
        gap: 12px;
        padding: 12px 20px;
      }
      
      .slider-dots button {
        width: 12px;
        height: 12px;
      }
    }
    
    /* Smooth fade for buttons during transition */
    .hero.transitioning .hero-content {
      opacity: 1;
      transform: translateY(0);
      transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      will-change: transform, opacity;
    }
    
    /* Navigation Arrows - Premium Design */
    .slider-nav {
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      transform: translateY(-50%);
      display: flex;
      justify-content: space-between;
      padding: 0 2rem;
      z-index: 15;
      pointer-events: none;
    }
    
    .slider-arrow {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      border: 2px solid rgba(255, 255, 255, 0.3);
      background: rgba(0, 0, 0, 0.2);
      backdrop-filter: blur(15px);
      color: white;
      font-size: 18px;
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      display: flex;
      align-items: center;
      justify-content: center;
      outline: none;
      pointer-events: all;
      position: relative;
      overflow: hidden;
    }
    
    .slider-arrow::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
      opacity: 0;
      transition: opacity 0.3s ease;
      border-radius: 50%;
    }
    
    .slider-arrow:hover {
      border-color: rgba(255, 255, 255, 0.8);
      background: rgba(255, 255, 255, 0.15);
      transform: scale(1.1);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }
    
    .slider-arrow:hover::before {
      opacity: 1;
    }
    
    .slider-arrow:active {
      transform: scale(0.95);
    }
    
    .slider-arrow i {
      transition: transform 0.3s ease;
    }
    
    .slider-arrow:hover i {
      transform: translateX(2px);
    }
    
    .slider-arrow-prev:hover i {
      transform: translateX(-2px);
    }
    
    /* Progress Bar */
    .slider-progress {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: transparent;
      z-index: 10;
    }
    
    .slider-progress-bar {
      height: 100%;
      background: linear-gradient(90deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 1) 100%) !important;
      width: 0%;
      transition: width 0.3s ease;
      animation: progressCycle 18s infinite linear;
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }
    
    /* Enhanced Mobile Responsive Design */
    @media (max-width: 768px) {
      .slider-nav {
        padding: 0 1rem;
      }
      
      .slider-arrow {
        width: 45px;
        height: 45px;
        font-size: 14px;
        border-width: 1.5px;
      }
      
      .slider-dots {
        bottom: 25px;
        padding: 6px 12px;
        gap: 10px;
        backdrop-filter: blur(8px);
        background: rgba(0, 0, 0, 0.25);
      }
      
      .slider-dots button {
        width: 10px;
        height: 10px;
        border-width: 1.5px;
      }
      
      .slider-dots button.active::before {
        width: 6px;
        height: 6px;
      }
      
      .hero::before {
  background: transparent;
}
      
      .slider-progress {
        height: 3px;
      }
    }
    
    /* Ultra-wide screens optimization */
    @media (min-width: 1920px) {
      .slider-nav {
        padding: 0 4rem;
      }
      
      .slider-arrow {
        width: 80px;
        height: 80px;
        font-size: 24px;
      }
      
      .slider-dots {
        bottom: 60px;
        padding: 16px 32px;
        gap: 20px;
      }
      
      .slider-dots button {
        width: 16px;
        height: 16px;
        border-width: 3px;
      }
      
      .slider-dots button.active::before {
        width: 12px;
        height: 12px;
      }
      
      .slider-progress {
        height: 6px;
      }
    }
    
    /* Reduced motion accessibility */
    @media (prefers-reduced-motion: reduce) {
      .hero {
        transition: none;
      }
      
      .slider-dots button {
        transition: none;
      }
      
      .slider-dots button.active {
        animation: none;
      }
      
      .hero .container {
        animation: none;
      }
    }

    .hero .container { 
      width: 100%; 
      max-width: 1280px; 
      padding: 0 2rem; 
      display: flex; 
      flex-direction: column; 
      align-items: center; 
      text-align: center;
      animation: fadeInUp 1s ease-out 0.3s both;
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(40px) scale(0.98);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }
    
    /* Additional aesthetic animations */
    @keyframes slideInFromLeft {
      from {
        opacity: 0;
        transform: translateX(-50px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    @keyframes slideInFromRight {
      from {
        opacity: 0;
        transform: translateX(50px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    /* Staggered animation for hero elements */
    .hero h1 {
      animation: fadeInUp 1.2s ease-out 0.5s both;
    }
    
    .hero .tagline {
      animation: fadeInUp 1.2s ease-out 0.7s both;
    }
    
    .hero-buttons .btn:first-child {
      animation: slideInFromLeft 1s ease-out 0.9s both;
    }
    
    .hero-buttons .btn:last-child {
      animation: slideInFromRight 1s ease-out 1.1s both;
    }
    .hero h1 { font-size: clamp(3rem, 6vw, 4.5rem); font-weight: 800; margin-bottom: 1rem; line-height: 1.1; }
    .hero p { font-size: 1.125rem; max-width: 700px; margin-bottom: 2rem; }

    /* About Section redesigned */
    .about-card { background:#fff; border:2px solid #d1d5db; border-radius:0.75rem; padding:2rem; box-shadow:0 2px 6px rgba(0,0,0,.04); grid-row: span 2; }
    .about-card h3 { font-size:2rem; margin-bottom:1.25rem; letter-spacing:0.5px; }
    .about-card .highlight { color:#28a745; }

    .about-grid { display:grid; gap:2rem; } /* base mobile */
    @media(min-width:768px){ .about-grid{ grid-template-columns:repeat(3,1fr); } .about-card{ grid-row:span 2; } }
    @media(min-width:1024px){ .about-grid{ grid-template-columns:1.2fr 1fr 1fr; } }
    .benefit-card { background:#fff; border:1px solid #e5e7eb; border-radius:0.75rem; padding:1.5rem; box-shadow:0 1px 4px rgba(0,0,0,.03); text-align:left; transition:transform .3s, box-shadow .3s; cursor:default; position:relative; overflow:hidden; }
    .benefit-card .icon { font-size:1.75rem; color:#28a745; margin-bottom:0.75rem; }
    .benefit-card h4 { font-size:1.125rem; font-weight:700; margin-bottom:0.5rem; }
    .benefit-card p { font-size:0.95rem; line-height:1.4; }
    .benefit-card:hover { transform:translateY(-6px); box-shadow:0 8px 24px rgba(0,0,0,.08); }
    .benefit-card:hover .icon { transform:scale(1.1) rotate(-5deg); }
    .benefit-card .icon { transition:transform .3s; }
    .about-list { margin-top:1rem; padding-left:1.25rem; list-style:none; }
    .about-list li { position:relative; margin-bottom:0.5rem; padding-left:1.25rem; font-size:0.95rem; }
    .about-list li::before { content:"\f00c"; font-family:"Font Awesome 5 Free"; font-weight:900; color:#28a745; position:absolute; left:0; }

    /* About Section */
    .about-section { padding:3rem 0; background:#f9fafb; }
    
    .about-section h2 { font-size:2.5rem; margin-bottom:2rem; text-align:center; color:#000; }
    

    /* Featured Services */
    .featured-services { padding: 5rem 1rem; }
    .services-grid { display: grid; grid-template-columns: repeat(auto-fit,minmax(250px,1fr)); gap: 2rem; margin-top: 3rem; }
    .service-card { background:#fff; border-radius: 0.75rem; box-shadow: 0 4px 20px rgba(0,0,0,.05); padding:2rem; transition: transform .3s, box-shadow .3s; }
    .service-card:hover { transform: translateY(-6px); box-shadow: 0 8px 24px rgba(0,0,0,.08); }
    .service-icon { font-size:2rem; color:#28a745; margin-bottom: 1rem; }

    /* CTA Banner */
    .cta-banner { background:linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%); color:#fff; padding:4rem 1rem; text-align:center; }
    .cta-banner h2 { font-size:2.25rem; margin-bottom:1.5rem; font-weight:700; }
    .cta-banner .btn-primary { background:#fff; color:var(--primary); border-color:#fff; display:inline-flex; align-items:center; justify-content:center; padding:1rem 2.5rem; font-size:1.1rem; border-radius:var(--radius-full); margin-top:1.5rem; box-shadow:var(--shadow-md); }
    .cta-banner .btn-primary:hover { background:#f8f9fa; }

    .hero-buttons { display:flex; gap:1.25rem; flex-wrap:wrap; justify-content:center; margin-top:2rem; }

    .hero-features {
      display:grid;
      grid-template-columns:repeat(4, minmax(150px, 1fr));
      gap:0.45rem 0.9rem;
      margin:1.2rem auto 1.6rem;
      max-width:600px;
      color:#fff;
      font-weight:600;
      justify-items:center;
    }
    .hero-features li{
      display:flex;
      align-items:center;
      justify-content:center;
      gap:0.25rem;
      font-size:0.85rem;
      text-align:center;
    }
    .hero-features i{
      margin-right:0.3rem;
      color:#28a745;
      font-size:0.8rem;
    }

    /* Responsive label lengths */
    .label-short{display:none;}
    /* Mostrar abreviaturas en móviles y tablets hasta 767px */
    @media(max-width:767.98px){
      .label-full{display:none;}
      .label-short{display:inline;}
    }
    @media(min-width:768px){
      .label-short{display:none;}
    }
    .hero-features li { list-style:none; }
    .hero-features li::before { display:none; }
    .hero h1 .highlight { color:#28a745; font-size:clamp(3.5rem,8vw,6rem); font-style:italic; line-height:1; display:block; text-shadow:1px 1px 3px rgba(0,0,0,0.2); }

    /* Hero Gallery */
    .hero-gallery { display:none; grid-template-columns: repeat(auto-fit,minmax(180px,1fr)); gap:1rem; width:100%; max-width:520px; margin-top:2rem; }
    .hero-gallery .gallery-img { width:100%; height:100%; aspect-ratio:4/3; object-fit:cover; border:4px solid #3e7a2b; border-radius:8px; box-shadow:0 4px 15px rgba(0,0,0,0.12); }

.hero {
  transition: background 1s ease-in-out;
}
.hero-gallery {
  display: none !important;
}
    
    
    
    

    @media(min-width:992px) {
      .hero .container { flex-direction: row; justify-content: space-between; align-items: center; column-gap: 4rem; }
      .hero-content { max-width:560px; text-align:left; margin-right:3rem; }
      .hero-gallery { display:grid; margin-top:0; align-self:flex-start; justify-self:flex-end; transform:translateY(-20px);} 
    }

    /* Breakpoints: XS (<576), SM (≥576), MD (≥768), LG (≥992), XL (≥1200) */
    @media(max-width:575.98px) {
      /* Hero mobile mejorado: ocupa viewport, tipografía potente y CTA full-width */
      .hero { padding:5.5rem 1rem 4rem; min-height:100vh; display:flex; flex-direction:column; justify-content:center; align-items:center; }
      .hero h1 { font-size:clamp(2.4rem,9vw,3rem); line-height:1.15; }
      .hero p { font-size:1.05rem; margin-bottom:1.75rem; }
      .hero-buttons { flex-direction:column; gap:0.9rem; width:100%; }
      .hero-buttons .btn { width:100%; padding:0.85rem 1rem; font-size:1.05rem; }
      /* Centrado del bloque principal */
      .hero-content { margin: 0 auto; max-width:480px; }
      /* Feature chips en grid de dos columnas para mayor legibilidad */
      /* Ajustes XS: distribución ultra-compacta */
      .hero-features {
        grid-template-columns:repeat(2,minmax(120px,1fr));
        gap:0.25rem 0.5rem;
        max-width:320px;
        margin:1rem auto 1.25rem;
      }
      .hero-features li { font-size:0.72rem; text-align:center; justify-content:center; gap:0.2rem; }
      .hero-features i {
        margin-right:0.25rem;
        font-size:0.75rem;
      }
    }

    /* Tablets SM-MD: tres columnas y balance */
    @media(min-width:576px) and (max-width:991.98px) {
      .hero { padding:6rem 1rem; }
      .hero h1 { font-size:clamp(2.25rem,6.5vw,3rem); }
      .hero p { font-size:1rem; }
      .hero-buttons { flex-direction:row; gap:1rem; justify-content:center; }
      .hero-features { grid-template-columns:repeat(3,minmax(140px,1fr)); gap:0.5rem 0.9rem; max-width:600px; }
    }

    @media(max-width:575.98px){
      .hero-features{grid-template-columns:repeat(2,minmax(120px,1fr)); max-width:360px; gap:0.3rem 0.7rem;}
    }

    /* Desktop ≥992px: 4 columnas */
    @media(min-width:992px){
      .hero-features{grid-template-columns:repeat(4,minmax(150px,1fr)); max-width:800px; gap:0.6rem 1rem;}
    }

    /* Show collage on tablets with reduced size */
    @media(min-width:768px) and (max-width:991.98px) {
      .hero-gallery { grid-template-columns:repeat(2,1fr); gap:0.75rem; max-width:360px; }
      .hero-gallery .gallery-img { height:140px; }
      .hero .container { flex-direction:row; align-items:center; text-align:left; column-gap: 3rem; }
      .hero-content { max-width:460px; }
      .hero-gallery { display:grid; width:100%; max-width:420px; margin-top:0; align-self:flex-start; transform:translateY(-10px);} 
      .hero-gallery .gallery-img { width:130px; height:100px; border-width:3px; }
      
      
      
      
    }

    /* XL screens – increase gallery for large desktops */
    @media(min-width:1200px) {
      .hero { padding:10rem 1rem; }
      .hero-gallery { max-width:640px; grid-template-columns:repeat(2,1fr); gap:1rem; }
      .hero-gallery .gallery-img { width:180px; height:135px; }
      
      
      
      
    }

    /* Newsletter */
    .newsletter-section { padding: 4rem 1rem; text-align: center; background:#ffffff; }
    .newsletter-form { display:flex; gap:1rem; justify-content:center; max-width: 600px; margin:2rem auto 0; }
    .newsletter-form input { flex: 1; padding:0.75rem 1rem; border:1px solid #d1d5db; border-radius: 0.5rem; font-size: 1rem; }

    /* Contact Section - Premium Design */
    .contact-section { 
      padding: 6rem 1rem; 
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      position: relative;
    }
    
    .contact-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="0.5" fill="%23000" opacity="0.02"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
      pointer-events: none;
    }
    
    .contact-grid { 
      display: grid; 
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); 
      gap: 3rem; 
      align-items: start;
      position: relative;
      z-index: 1;
    }
    
    .contact-info h2 { 
      font-size: 2.25rem; 
      margin-bottom: 1.5rem;
      background: linear-gradient(135deg, #1e293b, #475569);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .info-item { 
      display: flex; 
      gap: 1.25rem; 
      margin-bottom: 1.5rem;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.7);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      transition: all 0.3s ease;
    }
    
    .info-item:hover {
      background: rgba(255, 255, 255, 0.9);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }
    
    .info-icon { 
      font-size: 1.5rem; 
      color: #059669;
      background: linear-gradient(135deg, #10b981, #059669);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    /* Premium Map Container */
    .map-container { 
      position: relative; 
      border-radius: 20px; 
      overflow: hidden; 
      box-shadow: 
        0 20px 40px rgba(0, 0, 0, 0.1),
        0 8px 16px rgba(0, 0, 0, 0.06),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
      height: 400px;
      background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .map-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), transparent);
      pointer-events: none;
      z-index: 1;
    }
    
    #map { 
      width: 100%; 
      height: 100%;
      position: relative;
      z-index: 0;
    }
    
    /* Premium Loading Spinner */
    .map-spinner { 
      position: absolute; 
      top: 50%; 
      left: 50%; 
      width: 60px; 
      height: 60px; 
      margin: -30px 0 0 -30px; 
      border: 4px solid rgba(16, 185, 129, 0.2); 
      border-top: 4px solid #10b981;
      border-radius: 50%; 
      animation: premium-spin 1s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite; 
      z-index: 100;
      pointer-events: none;
      backdrop-filter: blur(4px);
      background: rgba(255, 255, 255, 0.1);
    }
    
    @keyframes premium-spin { 
      0% { transform: rotate(0deg) scale(1); }
      50% { transform: rotate(180deg) scale(1.1); }
      100% { transform: rotate(360deg) scale(1); }
    }
    
    /* Leaflet Container Enhancements */
    .leaflet-container { 
      background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    /* Custom Leaflet Controls Styling */
    .leaflet-control-zoom {
      border: none !important;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
      border-radius: 12px !important;
      overflow: hidden;
      backdrop-filter: blur(10px);
      background: rgba(255, 255, 255, 0.9) !important;
    }
    
    .leaflet-control-zoom a {
      background: rgba(255, 255, 255, 0.95) !important;
      border: none !important;
      color: #374151 !important;
      font-weight: 600 !important;
      font-size: 18px !important;
      width: 40px !important;
      height: 40px !important;
      line-height: 40px !important;
      transition: all 0.2s ease !important;
    }
    
    .leaflet-control-zoom a:hover {
      background: rgba(16, 185, 129, 0.1) !important;
      color: #059669 !important;
      transform: scale(1.05);
    }
    
    .leaflet-control-attribution {
      background: rgba(255, 255, 255, 0.8) !important;
      backdrop-filter: blur(10px) !important;
      border-radius: 8px !important;
      border: 1px solid rgba(255, 255, 255, 0.2) !important;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
      padding: 4px 8px !important;
      font-size: 10px !important;
      margin: 8px !important;
    }
    
    .leaflet-control-attribution a {
      color: #6b7280 !important;
      text-decoration: none !important;
    }
    
    .leaflet-control-attribution a:hover {
      color: #059669 !important;
    }
    
    /* Custom Popup Styling */
    .leaflet-popup-content-wrapper {
      background: transparent !important;
      border-radius: 12px !important;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
      border: none !important;
      padding: 0 !important;
    }
    
    .leaflet-popup-content {
      margin: 0 !important;
      border-radius: 12px !important;
      overflow: hidden;
    }
    
    .leaflet-popup-tip {
      background: linear-gradient(135deg, #f8fafc, #e2e8f0) !important;
      border: none !important;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
    }
    
    /* Custom Marker Animation */
    @keyframes markerBounce {
      0%, 100% {
        transform: translateY(0) scale(1);
      }
      50% {
        transform: translateY(-8px) scale(1.05);
      }
    }
    
    .custom-marker {
      filter: drop-shadow(0 4px 8px rgba(16, 185, 129, 0.3));
    }
    
    /* Responsive Map Adjustments */
    @media (max-width: 768px) {
      .map-container {
        height: 300px;
        border-radius: 16px;
      }
      
      .contact-section {
        padding: 4rem 1rem;
      }
      
      .contact-grid {
        gap: 2rem;
      }
      
      .leaflet-control-zoom a {
        width: 36px !important;
        height: 36px !important;
        line-height: 36px !important;
        font-size: 16px !important;
      }
    }
  </style>

  <script>
      // Initialize Leaflet map with Thunderforest tiles
      declare const L: any;
      window.addEventListener('load', () => {
        const mapElement = document.getElementById('map');
        if (!mapElement || typeof L === 'undefined') return;

        // Coordenadas por defecto (Barranquitas, PR)
        const location = [18.1869, -66.3129];

        const apiKey = import.meta.env.PUBLIC_THUNDERFOREST_API_KEY || '154b7c6250724292ab60fdac2ff0669c';

        const container = mapElement.parentElement as HTMLElement;
        const spinner = document.createElement('div');
        spinner.className = 'map-spinner';
        container.appendChild(spinner);

        // Corregir rutas de los íconos por defecto del marcador (evita 404)
        L.Icon.Default.mergeOptions({
          iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
          iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
          shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
        });

        const map = L.map(mapElement, {
          zoomControl: false, // Remove default zoom control
          attributionControl: false // Remove default attribution
        }).setView(location, 13);
        
        // Add custom zoom control with better positioning
        L.control.zoom({
          position: 'bottomright'
        }).addTo(map);
        
        // Add custom attribution control
        L.control.attribution({
          position: 'bottomleft',
          prefix: false
        }).addTo(map);

        const thunderLayer = L.tileLayer(`https://tile.thunderforest.com/landscape/{z}/{x}/{y}.png?apikey=${apiKey}`, {
          attribution: '<span style="font-size: 11px; opacity: 0.7;">&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors & <a href="https://www.thunderforest.com/">Thunderforest</a></span>',
          maxZoom: 18, // Reduced max zoom to prevent over-zooming
          minZoom: 10,
          opacity: 0.9
        }).addTo(map);

        // Ocultar spinner cuando Thunderforest cargue los primeros tiles
        thunderLayer.on('load', () => spinner.remove());

        // Si hay error al cargar un tile, cambia a capa OSM estándar
        thunderLayer.on('tileerror', () => {
          map.removeLayer(thunderLayer);
          const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '<span style="font-size: 11px; opacity: 0.7;">&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors</span>',
            maxZoom: 18,
            minZoom: 10,
            opacity: 0.9
          }).addTo(map);
          osmLayer.on('load', () => spinner.remove());
        });

        // Create custom marker with premium styling
        const customIcon = L.divIcon({
          className: 'custom-marker',
          html: `
            <div style="
              width: 40px;
              height: 40px;
              background: linear-gradient(135deg, #10b981, #059669);
              border-radius: 50% 50% 50% 0;
              transform: rotate(-45deg);
              border: 3px solid white;
              box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);
              display: flex;
              align-items: center;
              justify-content: center;
            ">
              <i class="fas fa-map-marker-alt" style="
                color: white;
                font-size: 16px;
                transform: rotate(45deg);
                margin-top: -2px;
              "></i>
            </div>
          `,
          iconSize: [40, 40],
          iconAnchor: [20, 35]
        });
        
        const marker = L.marker(location, { icon: customIcon })
          .addTo(map)
          .bindPopup(`
            <div style="
              padding: 12px;
              font-family: 'Inter', sans-serif;
              text-align: center;
              background: linear-gradient(135deg, #f8fafc, #e2e8f0);
              border-radius: 8px;
              border: none;
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            ">
              <h3 style="
                margin: 0 0 8px 0;
                color: #1e293b;
                font-size: 16px;
                font-weight: 600;
              ">📍 Nuestra Ubicación</h3>
              <p style="
                margin: 0;
                color: #64748b;
                font-size: 14px;
              ">Barranquitas, Puerto Rico</p>
            </div>
          `, {
            closeButton: false,
            className: 'custom-popup'
          })
          .openPopup();
          
        // Add subtle animation to marker
        setTimeout(() => {
          const markerElement = marker.getElement();
          if (markerElement) {
            markerElement.style.animation = 'markerBounce 2s ease-in-out infinite';
          }
        }, 1000);
      });
  </script>
<script>
// Advanced Hero Slider with Aesthetic Transitions
declare const heroImages: string[];

interface SliderConfig {
  images: string[];
  autoplayDelay: number;
  transitionDuration: number;
}

// Performance optimization helper
class PerformanceHelper {
  static enableGPUAcceleration(element: HTMLElement): void {
    element.style.transform = 'translateZ(0)';
    element.style.backfaceVisibility = 'hidden';
    element.style.perspective = '1000px';
  }
  
  static optimizeForAnimation(element: HTMLElement): void {
    element.style.willChange = 'transform, opacity, background-image';
  }
  
  static resetOptimization(element: HTMLElement): void {
    element.style.willChange = 'auto';
  }
}

class HeroSlider {
  private heroSection: HTMLElement;
  private sliderDots!: HTMLElement;
  private sliderNav!: HTMLElement;
  private progressBar!: HTMLElement;
  private config: SliderConfig;
  private currentIndex: number = 0;
  private autoplayInterval: number | null = null;
  private progressInterval: number | null = null;
  private isTransitioning: boolean = false;
  private preloadedImages: HTMLImageElement[] = [];
  private startTime: number = 0;

  constructor(heroSection: HTMLElement, config: SliderConfig) {
    this.heroSection = heroSection;
    this.config = config;
    this.currentIndex = 0;
    
    // Enable GPU acceleration for smooth performance
    PerformanceHelper.enableGPUAcceleration(this.heroSection);
    PerformanceHelper.optimizeForAnimation(this.heroSection);
    
    this.init();
  }

  private async init(): Promise<void> {
    console.log('🚀 Initializing slider components...');
    
    try {
      await this.preloadImages();
      console.log('📸 Images preloaded');
      
      this.createDots();
      console.log('🔘 Dots created');
      
      this.setupArrows();
      console.log('🏹 Arrows setup');
      
      this.setupProgressBar();
      console.log('📊 Progress bar setup');
      
      this.setSlide(0, false);
      console.log('🎯 Initial slide set');
      
      // Initialize progress bar display with robust method
      this.initializeProgressBar();
      this.updateProgressBar();
      console.log('📊 Progress bar initialized');
      
      this.startAutoplay();
      console.log('⏰ Autoplay started');
      
      this.addKeyboardNavigation();
      console.log('⌨️ Keyboard navigation added');
      
      console.log('✅ Slider initialization complete!');
    } catch (error) {
      console.error('❌ Error during slider initialization:', error);
    }
  }

  private async preloadImages(): Promise<void> {
    const promises = this.config.images.map((src: string) => {
      return new Promise<HTMLImageElement>((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.src = src;
      });
    });
    
    try {
      this.preloadedImages = await Promise.all(promises);
    } catch (error) {
      console.warn('Some images failed to preload:', error);
    }
  }

  private createDots(): void {
    console.log('🔘 Creating slider dots...');
    
    let sliderDots = this.heroSection.querySelector('.slider-dots') as HTMLElement;
    if (!sliderDots) {
      console.log('⚠️ Slider dots container not found, creating one...');
      sliderDots = document.createElement('div');
      sliderDots.className = 'slider-dots';
      this.heroSection.appendChild(sliderDots);
    }
    this.sliderDots = sliderDots;

    // Clear existing dots
    this.sliderDots.innerHTML = '';
    console.log(`📊 Creating ${this.config.images.length} dots`);

    this.config.images.forEach((imageUrl: string, index: number) => {
      const dot = document.createElement('button');
      dot.className = 'slider-dot';
      dot.setAttribute('aria-label', `Go to slide ${index + 1}`);
      dot.setAttribute('data-slide', index.toString());
      
      // Force visible styles directly on the element
      dot.style.cssText = `
        width: 16px !important;
        height: 16px !important;
        border-radius: 50% !important;
        border: 2px solid rgba(255, 255, 255, 0.8) !important;
        background: rgba(255, 255, 255, 0.4) !important;
        cursor: pointer !important;
        transition: all 0.3s ease !important;
        outline: none !important;
        padding: 0 !important;
        margin: 0 !important;
        display: block !important;
        opacity: 1 !important;
        visibility: visible !important;
      `;
      
      dot.addEventListener('click', () => {
        console.log(`🎯 Dot ${index + 1} clicked`);
        this.setSlide(index, true);
      });
      
      this.sliderDots.appendChild(dot);
      console.log(`✅ Dot ${index + 1} created with inline styles`);
    });
    
    // Force container styles
    this.sliderDots.style.cssText = `
      position: absolute !important;
      bottom: 30px !important;
      left: 50% !important;
      transform: translateX(-50%) !important;
      display: flex !important;
      gap: 15px !important;
      padding: 15px 25px !important;
      background: rgba(0, 0, 0, 0.5) !important;
      backdrop-filter: blur(10px) !important;
      border: 1px solid rgba(255, 255, 255, 0.3) !important;
      border-radius: 50px !important;
      z-index: 1000 !important;
      opacity: 1 !important;
      visibility: visible !important;
    `;
    
    console.log(`🎉 All ${this.sliderDots.children.length} dots created with forced visibility!`);
    console.log('📍 Dots container position:', this.sliderDots.getBoundingClientRect());
  }

  private setupArrows(): void {
    this.sliderNav = this.heroSection.querySelector('.slider-nav') as HTMLElement;
    if (!this.sliderNav) return;

    const prevArrow = this.sliderNav.querySelector('.slider-arrow-prev') as HTMLElement;
    const nextArrow = this.sliderNav.querySelector('.slider-arrow-next') as HTMLElement;

    if (prevArrow) {
      console.log('🔄 Setting up prev arrow listener');
      prevArrow.addEventListener('click', (e) => {
        console.log('⬅️ Prev arrow clicked!');
        e.preventDefault();
        e.stopPropagation();
        this.previousSlide();
      });
    } else {
      console.warn('❌ Prev arrow not found!');
    }

    if (nextArrow) {
      console.log('🔄 Setting up next arrow listener');
      nextArrow.addEventListener('click', (e) => {
        console.log('➡️ Next arrow clicked!');
        e.preventDefault();
        e.stopPropagation();
        this.nextSlide();
      });
    } else {
      console.warn('❌ Next arrow not found!');
    }
  }

  private setupProgressBar(): void {
    this.progressBar = this.heroSection.querySelector('.slider-progress-bar') as HTMLElement;
    
    console.log('🔍 Progress bar setup debug:');
    console.log('- Hero section:', this.heroSection);
    console.log('- Progress bar element:', this.progressBar);
    console.log('- Progress bar exists:', !!this.progressBar);
    
    if (this.progressBar) {
      console.log('- Progress bar computed styles:', window.getComputedStyle(this.progressBar));
      console.log('- Progress bar initial width:', this.progressBar.style.width);
      console.log('- Progress bar parent:', this.progressBar.parentElement);
    } else {
      console.error('❌ Progress bar element not found!');
      // Try to find it with different selectors
      const allProgressBars = document.querySelectorAll('.slider-progress-bar');
      console.log('- All progress bars in document:', allProgressBars);
    }
  }

  private initializeProgressBar(): void {
    console.log('🔧 Initializing progress bar with robust method...');
    
    // Find or create progress bar elements
    let progressContainer = this.heroSection.querySelector('.slider-progress') as HTMLElement;
    if (!progressContainer) {
      console.log('⚠️ Progress container not found, creating one...');
      progressContainer = document.createElement('div');
      progressContainer.className = 'slider-progress';
      progressContainer.style.cssText = `
        position: absolute !important;
        bottom: 0 !important;
        left: 0 !important;
        right: 0 !important;
        height: 4px !important;
        background: rgba(255, 255, 255, 0.2) !important;
        z-index: 20 !important;
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
      `;
      this.heroSection.appendChild(progressContainer);
    }
    
    let progressBar = progressContainer.querySelector('.slider-progress-bar') as HTMLElement;
    if (!progressBar) {
      console.log('⚠️ Progress bar not found, creating one...');
      progressBar = document.createElement('div');
      progressBar.className = 'slider-progress-bar';
      progressBar.style.cssText = `
        height: 100% !important;
        background: linear-gradient(90deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 1) 100%) !important;
        width: 0%;
        transition: width 0.3s ease !important;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.5) !important;
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
      `;
      progressContainer.appendChild(progressBar);
    }
    
    this.progressBar = progressBar;
    console.log('✅ Progress bar initialized successfully:', this.progressBar);
  }

  private addKeyboardNavigation(): void {
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'ArrowLeft') {
        this.previousSlide();
      } else if (e.key === 'ArrowRight') {
        this.nextSlide();
      }
    });
  }

  private previousSlide(): void {
    console.log('🔙 previousSlide() called, current index:', this.currentIndex);
    const prevIndex = this.currentIndex === 0 ? this.config.images.length - 1 : this.currentIndex - 1;
    console.log('🔙 Going to previous slide:', prevIndex);
    this.setSlide(prevIndex, true);
  }

  private nextSlide(): void {
    console.log('🔚 nextSlide() called, current index:', this.currentIndex);
    const nextIndex = (this.currentIndex + 1) % this.config.images.length;
    console.log('🔚 Going to next slide:', nextIndex);
    this.setSlide(nextIndex, true);
  }

  private setSlide(index: number, userTriggered: boolean = false): void {
    if (this.isTransitioning || index === this.currentIndex) return;
    
    this.isTransitioning = true;
    const previousIndex = this.currentIndex;
    this.currentIndex = index;

    // Preload the new image to ensure smooth transition
    const newImage = new Image();
    const imageUrl = this.config.images[index];
    
    newImage.onload = () => {
      // Use requestAnimationFrame for smooth animation
      requestAnimationFrame(() => {
        // Update background with proper gradient overlay for brand consistency
        (this.heroSection as HTMLElement).style.backgroundImage = 
          `url('${imageUrl}')`;
        
        // Add smooth transition class
        this.heroSection.classList.add('transitioning');
        
        // Update UI elements immediately
        this.updateDots();
        this.updateArrows();
        this.updateProgressBar();
        
        // Remove transition class after smooth duration
        setTimeout(() => {
          this.heroSection.classList.remove('transitioning');
          this.isTransitioning = false;
        }, 600);
      });
    };
    
    // Start loading the image
    // Start loading the image
    newImage.src = imageUrl;

    // If the image was cached and loads instantly, ensure onload still fires
    if (newImage.complete) {
      // Give the browser a tick to attach the event, then invoke manually
      setTimeout(() => newImage.onload?.(new Event('load')), 0);
    }

    // Reset autoplay if user triggered
    if (userTriggered) {
      this.resetAutoplay();
    }
  }

  private updateArrows(): void {
    // Add subtle animation to arrows when slide changes
    const arrows = this.heroSection.querySelectorAll('.slider-arrow');
    arrows.forEach((arrow: Element) => {
      arrow.classList.add('slide-change');
      setTimeout(() => arrow.classList.remove('slide-change'), 300);
    });
  }

  private updateDots(): void {
    if (!this.sliderDots) return;
    
    const dots = this.sliderDots.querySelectorAll('button');
    console.log(`🔄 Updating dots, found ${dots.length} dots, current index: ${this.currentIndex}`);
    
    dots.forEach((dot: Element, index: number) => {
      const button = dot as HTMLButtonElement;
      if (index === this.currentIndex) {
        button.classList.add('active');
        // Force active styles
        button.style.cssText += `
          transform: scale(1.4) !important;
          border-color: rgba(255, 255, 255, 1) !important;
          background: rgba(255, 255, 255, 0.8) !important;
          box-shadow: 0 0 15px rgba(255, 255, 255, 0.5) !important;
        `;
        console.log(`⭐ Dot ${index + 1} set as active`);
      } else {
        button.classList.remove('active');
        // Reset to normal styles
        button.style.cssText = `
          width: 16px !important;
          height: 16px !important;
          border-radius: 50% !important;
          border: 2px solid rgba(255, 255, 255, 0.8) !important;
          background: rgba(255, 255, 255, 0.4) !important;
          cursor: pointer !important;
          transition: all 0.3s ease !important;
          outline: none !important;
          padding: 0 !important;
          margin: 0 !important;
          display: block !important;
          opacity: 1 !important;
          visibility: visible !important;
        `;
      }
    });
  }

  private updateProgressBar(): void {
    console.log('🔍 updateProgressBar() called');
    console.log('- Progress bar element exists:', !!this.progressBar);
    
    if (!this.progressBar) {
      console.error('❌ Progress bar element is null/undefined!');
      // Try to find it again
      this.progressBar = this.heroSection.querySelector('.slider-progress-bar') as HTMLElement;
      console.log('- Retry finding progress bar:', !!this.progressBar);
      if (!this.progressBar) return;
    }
    
    // Calculate progress percentage based on current slide
    const progressPercentage = ((this.currentIndex + 1) / this.config.images.length) * 100;
    
    console.log(`📊 Updating progress bar:`);
    console.log(`- Current index: ${this.currentIndex}`);
    console.log(`- Total images: ${this.config.images.length}`);
    console.log(`- Calculated percentage: ${progressPercentage.toFixed(1)}%`);
    console.log(`- Progress bar before update:`, {
      width: this.progressBar.style.width,
      transition: this.progressBar.style.transition,
      opacity: this.progressBar.style.opacity,
      visibility: this.progressBar.style.visibility
    });
    
    // Stop any ongoing autoplay animation and update
    this.progressBar.style.transition = 'width 0.3s ease';
    this.progressBar.style.width = `${progressPercentage}%`;
    this.progressBar.style.opacity = '1';
    this.progressBar.style.visibility = 'visible';
    
    console.log(`- Progress bar after update:`, {
      width: this.progressBar.style.width,
      transition: this.progressBar.style.transition,
      opacity: this.progressBar.style.opacity,
      visibility: this.progressBar.style.visibility
    });
    
    // Force a visual update
    this.progressBar.offsetHeight;
    
    console.log(`✅ Progress bar updated to ${progressPercentage.toFixed(1)}% (slide ${this.currentIndex + 1}/${this.config.images.length})`);
  }

  private startAutoplay(): void {
    this.startTime = Date.now();
    this.startProgressBar();
    
    this.autoplayInterval = window.setInterval(() => {
      const nextIndex = (this.currentIndex + 1) % this.config.images.length;
      this.setSlide(nextIndex);
    }, this.config.autoplayDelay);
  }

  private startProgressBar(): void {
    if (!this.progressBar) return;
    
    // Set initial progress based on current slide
    const currentProgress = ((this.currentIndex + 1) / this.config.images.length) * 100;
    const nextProgress = (((this.currentIndex + 1) % this.config.images.length + 1) / this.config.images.length) * 100;
    
    // Set current progress immediately
    this.progressBar.style.transition = 'width 0.3s ease';
    this.progressBar.style.width = `${currentProgress}%`;
    
    // Animate to next progress over autoplay duration
    requestAnimationFrame(() => {
      setTimeout(() => {
        this.progressBar.style.transition = `width ${this.config.autoplayDelay}ms linear`;
        this.progressBar.style.width = `${nextProgress}%`;
      }, 100);
    });
  }

  private resetAutoplay(): void {
    if (this.autoplayInterval) {
      clearInterval(this.autoplayInterval);
    }
    if (this.progressInterval) {
      clearInterval(this.progressInterval);
    }
    this.startAutoplay();
  }

  public destroy(): void {
    if (this.autoplayInterval) {
      clearInterval(this.autoplayInterval);
    }
    if (this.progressInterval) {
      clearInterval(this.progressInterval);
    }
  }
}

// Initialize slider when DOM is loaded
window.addEventListener('load', () => {
  console.log('🎯 Initializing Hero Slider...');
  
  const heroSection = document.querySelector('.hero') as HTMLElement;
  if (!heroSection) {
    console.error('❌ Hero section not found!');
    return;
  }

  const sliderConfig: SliderConfig = {
    images: heroImages,
    autoplayDelay: 6000, // 6 seconds for better UX
    transitionDuration: 1200 // 1.2 seconds transition
  };

  console.log('📸 Slider images:', sliderConfig.images);
  
  try {
    const slider = new HeroSlider(heroSection, sliderConfig);
    console.log('✅ Hero Slider initialized successfully!');
  } catch (error) {
    console.error('❌ Error initializing slider:', error);
  }
});

// Fallback initialization in case load event doesn't fire
if (document.readyState === 'complete') {
  console.log('🔄 Document already loaded, initializing slider immediately...');
  
  const heroSection = document.querySelector('.hero') as HTMLElement;
  if (heroSection) {
    
    
    const sliderConfig: SliderConfig = {
      images: heroImages,
      autoplayDelay: 6000,
      transitionDuration: 1200
    };
    
    // Initialize slider immediately for best UX
    const slider = new HeroSlider(heroSection, sliderConfig);
    console.log('🚀 Hero slider initialized successfully');
    
    // Ensure first image loads immediately
    const firstImage = new Image();
    firstImage.onload = () => {
      console.log('✅ First hero image preloaded');
    };
    firstImage.src = heroImages[0];
  }
}
</script>


